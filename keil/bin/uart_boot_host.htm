<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\bin\uart_boot_host.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\bin\uart_boot_host.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon May 04 09:14:54 2020
<BR><P>
<H3>Maximum Stack Usage =        348 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; send_hello &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SecureFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">am_adc_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">am_adc_isr</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">BusFault_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from am_util_faultisr.o(.emb_text) referenced from startup_keil.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[8]">SecureFault_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[30]">__main</a> from __main.o(!!!main) referenced from startup_keil.o(RESET)
 <LI><a href="#[1f]">am_adc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[19]">am_ble_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[d]">am_brownout_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2c]">am_clkgen_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1b]">am_ctimer_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1a]">am_gpio_isr</a> from uart_boot_host.o(i.am_gpio_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[2e]">am_hal_itm_print</a> from am_hal_itm.o(i.am_hal_itm_print) referenced from am_bsp.o(i.am_bsp_itm_printf_enable)
 <LI><a href="#[13]">am_iomaster0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[14]">am_iomaster1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[15]">am_iomaster2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[16]">am_iomaster3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[17]">am_iomaster4_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[18]">am_iomaster5_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[12]">am_ioslave_acc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[11]">am_ioslave_ios_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[21]">am_mspi0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[20]">am_pdm0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[f]">am_rtc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1e]">am_scard_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[22]">am_software0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[24]">am_stimer_cmpr0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[25]">am_stimer_cmpr1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[26]">am_stimer_cmpr2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[27]">am_stimer_cmpr3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[28]">am_stimer_cmpr4_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[29]">am_stimer_cmpr5_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2a]">am_stimer_cmpr6_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2b]">am_stimer_cmpr7_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[23]">am_stimer_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1d]">am_uart1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1c]">am_uart_isr</a> from uart_boot_host.o(i.am_uart_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[10]">am_vcomp_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[e]">am_watchdog_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2f]">hostint_handler</a> from uart_boot_host.o(i.hostint_handler) referenced from uart_boot_host.o(i.iom_set_up)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>am_adc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>am_ble_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>am_brownout_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>am_clkgen_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>am_ctimer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>am_iomaster0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>am_iomaster1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>am_iomaster2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>am_iomaster3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>am_iomaster4_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>am_iomaster5_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>am_ioslave_acc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>am_ioslave_ios_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>am_mspi0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>am_pdm0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>am_rtc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>am_scard_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>am_software0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>am_stimer_cmpr0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>am_stimer_cmpr1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>am_stimer_cmpr2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>am_stimer_cmpr3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>am_stimer_cmpr4_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>am_stimer_cmpr5_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>am_stimer_cmpr6_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>am_stimer_cmpr7_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>am_stimer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>am_uart0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1d]"></a>am_uart1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>am_vcomp_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>am_watchdog_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[32]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[34]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[35]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[36]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[9f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[af]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[33]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ba]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[38]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; send_hello &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[48]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[bd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[41]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, am_util_faultisr.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HardFault_Handler &rArr; am_util_faultisr_collect_data &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>getStackedReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_util_faultisr.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[98]"></a>am_hal_interrupt_master_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_up
</UL>

<P><STRONG><a name="[5a]"></a>am_hal_interrupt_master_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_service
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_status_get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_enable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_nonblocking
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nonblocking
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
</UL>

<P><STRONG><a name="[5b]"></a>am_hal_interrupt_master_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_service
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_status_get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_enable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_nonblocking
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nonblocking
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
</UL>

<P><STRONG><a name="[47]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_service
</UL>

<P><STRONG><a name="[be]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[bf]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_up
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3e]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ca]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[cb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>am_bsp_iom_pins_enable</STRONG> (Thumb, 454 bytes, Stack size 8 bytes, am_bsp.o(i.am_bsp_iom_pins_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = am_bsp_iom_pins_enable &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
</UL>

<P><STRONG><a name="[4e]"></a>am_bsp_itm_printf_enable</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, am_bsp.o(i.am_bsp_itm_printf_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = am_bsp_itm_printf_enable &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_tpiu_enable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_itm_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>am_bsp_low_power_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, am_bsp.o(i.am_bsp_low_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = am_bsp_low_power_init &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_disable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>am_gpio_isr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart_boot_host.o(i.am_gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = am_gpio_isr &rArr; am_hal_gpio_interrupt_service
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_status_get
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_service
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>am_hal_cachectrl_control</STRONG> (Thumb, 710 bytes, Stack size 16 bytes, am_hal_cachectrl.o(i.am_hal_cachectrl_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_cachectrl_control &rArr; am_hal_flash_store_ui32
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_store_ui32
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_load_ui32
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[5e]"></a>am_hal_clkgen_control</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, am_hal_clkgen.o(i.am_hal_clkgen_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_clkgen_control
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>am_hal_clkgen_status_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_tpiu_enable
</UL>

<P><STRONG><a name="[6d]"></a>am_hal_cmdq_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, am_hal_cmdq.o(i.am_hal_cmdq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
</UL>

<P><STRONG><a name="[69]"></a>am_hal_cmdq_init</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, am_hal_cmdq.o(i.am_hal_cmdq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_cmdq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
</UL>

<P><STRONG><a name="[60]"></a>am_hal_crc32</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, am_hal_security.o(i.am_hal_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = am_hal_crc32 &rArr; am_hal_flash_delay_status_change
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay_status_change
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hello
</UL>

<P><STRONG><a name="[5f]"></a>am_hal_flash_delay</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, am_hal_flash.o(i.am_hal_flash_delay))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_control
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_tpiu_enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_iom_reset_on_error
</UL>

<P><STRONG><a name="[61]"></a>am_hal_flash_delay_status_change</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, am_hal_flash.o(i.am_hal_flash_delay_status_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_flash_delay_status_change
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_crc32
</UL>

<P><STRONG><a name="[66]"></a>am_hal_flash_delay_status_check</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, am_hal_flash.o(i.am_hal_flash_delay_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_flash_delay_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[5c]"></a>am_hal_flash_load_ui32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, am_hal_flash.o(i.am_hal_flash_load_ui32))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
</UL>

<P><STRONG><a name="[5d]"></a>am_hal_flash_store_ui32</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, am_hal_flash.o(i.am_hal_flash_store_ui32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_flash_store_ui32
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
</UL>

<P><STRONG><a name="[57]"></a>am_hal_gpio_interrupt_clear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, am_hal_gpio.o(i.am_hal_gpio_interrupt_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_gpio_interrupt_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
</UL>

<P><STRONG><a name="[62]"></a>am_hal_gpio_interrupt_enable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, am_hal_gpio.o(i.am_hal_gpio_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
</UL>

<P><STRONG><a name="[8d]"></a>am_hal_gpio_interrupt_register</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, am_hal_gpio.o(i.am_hal_gpio_interrupt_register))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
</UL>

<P><STRONG><a name="[58]"></a>am_hal_gpio_interrupt_service</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, am_hal_gpio.o(i.am_hal_gpio_interrupt_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_gpio_interrupt_service
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[56]"></a>am_hal_gpio_interrupt_status_get</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, am_hal_gpio.o(i.am_hal_gpio_interrupt_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_gpio_interrupt_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[4a]"></a>am_hal_gpio_pinconfig</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, am_hal_gpio.o(i.am_hal_gpio_pinconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_iom_pins_enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_boot_mode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_up
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USE_SPI_get
</UL>

<P><STRONG><a name="[4c]"></a>am_hal_gpio_state_read</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, am_hal_gpio.o(i.am_hal_gpio_state_read))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USE_SPI_get
</UL>

<P><STRONG><a name="[55]"></a>am_hal_gpio_state_write</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, am_hal_gpio.o(i.am_hal_gpio_state_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_gpio_state_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_boot_mode
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>am_hal_iom_blocking_transfer</STRONG> (Thumb, 776 bytes, Stack size 56 bytes, am_hal_iom.o(i.am_hal_iom_blocking_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = am_hal_iom_blocking_transfer &rArr; am_hal_flash_delay_status_check
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_transaction
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_iom_reset_on_error
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_slave_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_slave_read
</UL>

<P><STRONG><a name="[8c]"></a>am_hal_iom_configure</STRONG> (Thumb, 630 bytes, Stack size 36 bytes, am_hal_iom.o(i.am_hal_iom_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = am_hal_iom_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
</UL>

<P><STRONG><a name="[68]"></a>am_hal_iom_enable</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, am_hal_iom.o(i.am_hal_iom_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_iom_enable &rArr; am_hal_cmdq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cmdq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
</UL>

<P><STRONG><a name="[8b]"></a>am_hal_iom_initialize</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, am_hal_iom.o(i.am_hal_iom_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_iom_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
</UL>

<P><STRONG><a name="[6a]"></a>am_hal_iom_power_ctrl</STRONG> (Thumb, 724 bytes, Stack size 16 bytes, am_hal_iom.o(i.am_hal_iom_power_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_iom_power_ctrl &rArr; am_hal_pwrctrl_periph_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cmdq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
</UL>

<P><STRONG><a name="[4f]"></a>am_hal_itm_enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, am_hal_itm.o(i.am_hal_itm_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
</UL>

<P><STRONG><a name="[2e]"></a>am_hal_itm_print</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, am_hal_itm.o(i.am_hal_itm_print))
<BR>[Address Reference Count : 1]<UL><LI> am_bsp.o(i.am_bsp_itm_printf_enable)
</UL>
<P><STRONG><a name="[7d]"></a>am_hal_mcuctrl_info_get</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, am_hal_mcuctrl.o(i.am_hal_mcuctrl_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[53]"></a>am_hal_pwrctrl_low_power_init</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, am_hal_pwrctrl.o(i.am_hal_pwrctrl_low_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = am_hal_pwrctrl_low_power_init &rArr; am_hal_cachectrl_control &rArr; am_hal_flash_store_ui32
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[6b]"></a>am_hal_pwrctrl_periph_disable</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, am_hal_pwrctrl.o(i.am_hal_pwrctrl_periph_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_pwrctrl_periph_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
</UL>

<P><STRONG><a name="[6c]"></a>am_hal_pwrctrl_periph_enable</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, am_hal_pwrctrl.o(i.am_hal_pwrctrl_periph_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_pwrctrl_periph_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
</UL>

<P><STRONG><a name="[72]"></a>am_hal_queue_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, am_hal_queue.o(i.am_hal_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
</UL>

<P><STRONG><a name="[6e]"></a>am_hal_queue_item_add</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, am_hal_queue.o(i.am_hal_queue_item_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_service
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_nonblocking
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nonblocking
</UL>

<P><STRONG><a name="[6f]"></a>am_hal_queue_item_get</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, am_hal_queue.o(i.am_hal_queue_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_service
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_nonblocking
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nonblocking
</UL>

<P><STRONG><a name="[54]"></a>am_hal_rtc_osc_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_osc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[50]"></a>am_hal_tpiu_enable</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, am_hal_tpiu.o(i.am_hal_tpiu_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_tpiu_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
</UL>

<P><STRONG><a name="[71]"></a>am_hal_uart_configure</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, am_hal_uart.o(i.am_hal_uart_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_uart_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_up
</UL>

<P><STRONG><a name="[96]"></a>am_hal_uart_initialize</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, am_hal_uart.o(i.am_hal_uart_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_uart_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_up
</UL>

<P><STRONG><a name="[79]"></a>am_hal_uart_interrupt_clear</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_interrupt_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[97]"></a>am_hal_uart_interrupt_enable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_up
</UL>

<P><STRONG><a name="[73]"></a>am_hal_uart_interrupt_service</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, am_hal_uart.o(i.am_hal_uart_interrupt_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = am_hal_uart_interrupt_service &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[78]"></a>am_hal_uart_interrupt_status_get</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_interrupt_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[74]"></a>am_hal_uart_power_control</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, am_hal_uart.o(i.am_hal_uart_power_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_hal_uart_power_control &rArr; am_hal_pwrctrl_periph_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_up
</UL>

<P><STRONG><a name="[75]"></a>am_hal_uart_transfer</STRONG> (Thumb, 844 bytes, Stack size 160 bytes, am_hal_uart.o(i.am_hal_uart_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_nonblocking
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nonblocking
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[1c]"></a>am_uart_isr</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, uart_boot_host.o(i.am_uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = am_uart_isr &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_status_get
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_service
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_clear
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>am_util_delay_ms</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, am_util_delay.o(i.am_util_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_util_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>am_util_delay_us</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, am_util_delay.o(i.am_util_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_util_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_boot_mode
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USE_SPI_get
</UL>

<P><STRONG><a name="[43]"></a>am_util_faultisr_collect_data</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, am_util_faultisr.o(i.am_util_faultisr_collect_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = am_util_faultisr_collect_data &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_info_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStackedReg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[7e]"></a>am_util_stdio_printf</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, am_util_stdio.o(i.am_util_stdio_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hello
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>am_util_stdio_printf_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_util_stdio.o(i.am_util_stdio_printf_init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
</UL>

<P><STRONG><a name="[7f]"></a>am_util_stdio_vsprintf</STRONG> (Thumb, 932 bytes, Stack size 96 bytes, am_util_stdio.o(i.am_util_stdio_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_hexstr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strlen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padbuffer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_i64
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_hex
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr_to_int
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>

<P><STRONG><a name="[8f]"></a>iom_slave_read</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, uart_boot_host.o(i.iom_slave_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iom_slave_read &rArr; am_hal_iom_blocking_transfer &rArr; am_hal_flash_delay_status_check
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>iom_slave_write</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, uart_boot_host.o(i.iom_slave_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iom_slave_write &rArr; am_hal_iom_blocking_transfer &rArr; am_hal_flash_delay_status_check
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hello
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>main</STRONG> (Thumb, 792 bytes, Stack size 32 bytes, uart_boot_host.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = main &rArr; send_hello &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_control
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_boot_mode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hello
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_slave_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_slave_read
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_up
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USE_SPI_get
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[93]"></a>send_hello</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uart_boot_host.o(i.send_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = send_hello &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_crc32
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_slave_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>start_boot_mode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart_boot_host.o(i.start_boot_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = start_boot_mode &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>validate_transaction</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, am_hal_iom.o(i.validate_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = validate_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[99]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[37]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[ce]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[cf]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[9a]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[49]"></a>USE_SPI_get</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart_boot_host.o(i.USE_SPI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USE_SPI_get &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_read
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_boot_host.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_up
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_set_up
</UL>

<P><STRONG><a name="[2f]"></a>hostint_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_boot_host.o(i.hostint_handler))
<BR>[Address Reference Count : 1]<UL><LI> uart_boot_host.o(i.iom_set_up)
</UL>
<P><STRONG><a name="[8a]"></a>iom_set_up</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, uart_boot_host.o(i.iom_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = iom_set_up &rArr; am_bsp_iom_pins_enable &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_initialize
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_configure
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_register
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_enable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_iom_pins_enable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>uart_set_up</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, uart_boot_host.o(i.uart_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uart_set_up &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_initialize
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>decstr_to_int</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, am_util_stdio.o(i.decstr_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = decstr_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[95]"></a>divu64_10</STRONG> (Thumb, 204 bytes, Stack size 36 bytes, am_util_stdio.o(i.divu64_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
</UL>

<P><STRONG><a name="[89]"></a>ftoa</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, am_util_stdio.o(i.ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[83]"></a>ndigits_in_hex</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, am_util_stdio.o(i.ndigits_in_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ndigits_in_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[87]"></a>ndigits_in_i64</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, am_util_stdio.o(i.ndigits_in_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ndigits_in_i64 &rArr; ndigits_in_u64 &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[85]"></a>ndigits_in_u64</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, am_util_stdio.o(i.ndigits_in_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ndigits_in_u64 &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_i64
</UL>

<P><STRONG><a name="[82]"></a>padbuffer</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, am_util_stdio.o(i.padbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = padbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[81]"></a>simple_strlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, am_util_stdio.o(i.simple_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[84]"></a>uint64_to_hexstr</STRONG> (Thumb, 138 bytes, Stack size 44 bytes, am_util_stdio.o(i.uint64_to_hexstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uint64_to_hexstr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[86]"></a>uint64_to_str</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, am_util_stdio.o(i.uint64_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[67]"></a>internal_iom_reset_on_error</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, am_hal_iom.o(i.internal_iom_reset_on_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = internal_iom_reset_on_error
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
</UL>

<P><STRONG><a name="[77]"></a>read_nonblocking</STRONG> (Thumb, 288 bytes, Stack size 112 bytes, am_hal_uart.o(i.read_nonblocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
</UL>

<P><STRONG><a name="[76]"></a>write_nonblocking</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, am_hal_uart.o(i.write_nonblocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
